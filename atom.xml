<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://yeyusky.github.io</id>
    <title>夜雨、听风</title>
    <updated>2019-07-08T04:43:32.200Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://yeyusky.github.io"/>
    <link rel="self" href="https://yeyusky.github.io/atom.xml"/>
    <subtitle>when you feel  unhappy ,look at the sky!</subtitle>
    <logo>https://yeyusky.github.io/images/avatar.png</logo>
    <icon>https://yeyusky.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, 夜雨、听风</rights>
    <entry>
        <title type="html"><![CDATA[Vue学习总结--vue实例]]></title>
        <id>https://yeyusky.github.io/post/vue-xue-xi-zong-jie-vue-shi-li</id>
        <link href="https://yeyusky.github.io/post/vue-xue-xi-zong-jie-vue-shi-li">
        </link>
        <updated>2019-07-05T04:16:12.000Z</updated>
        <content type="html"><![CDATA[<h1>vue的实例与数据</h1>
<p style="text-indent:2em;">让我们看一个最简单的实例，如下图：</p>
<img src="https://yeyusky.github.io/post-images/vuesl.png" alt="" />
<p style="text-indent:2em; font-size:12px;">如上图所示的实例，变量vm就代表了这个vue实例，我们这样就建好了一个vue实例，我们可以在实例里面添加内容（选项），从而让我们所想的渲染到页面上</p>
<p style="text-indent:2em;">首先，必不可少的的一个选项就是el（挂载点），el用于指点一个页面中的DOM元素来挂载这个实例，如下图所示：</p>
<img src="https://yeyusky.github.io/post-images/vueel.png" alt="" />
<p style="text-indent:2em; font-size:12px;">这样我们就把一个实例挂载到了页面中存在的dom元素上</p>
<p style="text-indent:2em;">下面让我们来看另一个选项，data选项，data选项里面的属性（也就是数据），实例本身也代理data里面的属性，SO，我们可以把这些数据渲染到页面中，如下图：</p>
<img src="https://yeyusky.github.io/post-images/vuedata.png" alt="" />
<p style="text-indent:2em;">页面中是这个样的，如下图：</p>
<img src="https://yeyusky.github.io/post-images/vuedatah.png" alt="" />
<p style="text-indent:2em;">第三个选项是props，用于接收来自父组件的数据。因为组件实例的作用域是孤立的。这意味着不能在子组件的模板内直接引用父组件的数据。要让子组件使用父组件的数据，我们需要通过子组件的 props 选项。如下图所示：</p>
<img src="https://yeyusky.github.io/post-images/vueprops.png" alt="" />
<p style="text-indent:2em;">第四个选项是Computed（计算属性），1、我们可以像绑定普通属性一样在模板中绑定计算属性。2、计算属性是基于它们的依赖进行缓存的。也就是说，计算属性只有在它的相关依赖发生改变时才会重新求值。如果data中的属性值未发生变化，执行总会返回之前执行的结果。3、每当触发重新渲染时，调用方法将总会再次执行函数。</p>
<p style="text-indent:2em;">第五个选项是 methods（里面是一些function），我们可以直接通过 实例访问这些方法，或者在指令表达式中使用。如图：</p>
<img src="https://yeyusky.github.io/post-images/vuemethods.png" alt="" />
<img src="https://yeyusky.github.io/post-images/vuemethodsh.png" alt="" />
<p style="text-indent:2em;">第六个选项是watch（侦听属性），我们可以通过 watch 来响应数据的变化，如下图：</p>
<img src="https://yeyusky.github.io/post-images/vuewatch.png" alt="" />
<img src="https://yeyusky.github.io/post-images/vuewatch1.png" alt="" />
<img src="https://yeyusky.github.io/post-images/vuewatch2.png" alt="" />]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue学习总结--component组件]]></title>
        <id>https://yeyusky.github.io/post/vue-component</id>
        <link href="https://yeyusky.github.io/post/vue-component">
        </link>
        <updated>2019-07-02T04:41:33.000Z</updated>
        <content type="html"><![CDATA[<h1>如何引入vue？</h1>
<p style="text-indent:2em;">vue.js跟jQuery相似，所以我们要先引人vue.js，引入可以通过官网下载JS文件（这里就不做详细介绍了），如下图：</p>
<img src="https://yeyusky.github.io/post-images/yr-vue.png" alt="" />
<p style="text-indent:2em;">亦或是通过cdn的方式引入，如下图：</p>
<img src="https://yeyusky.github.io/post-images/cdnyr-vue.png" alt="" />
<p style="text-indent:2em;">再或是通过npm安装引入，如下图：</p>
<img src="https://yeyusky.github.io/post-images/npmyr-vue.png" alt="" />
<p style="text-indent:2em;">上面的都完成了，下面我们就可以来一起学习一下vue的组件，vue组件有全局组件和局部组件两种</p>
<h1>vue之全局组件</h1>
<p style="text-indent:2em;">全局组件代码如下图：</p>
<img src="https://yeyusky.github.io/post-images/qcomponent.png" alt="" />
<p style="text-indent:2em;">如果只是按照上图所示是不成功的，必须还要new一个vue实例，如下图：</p>
<img src="https://yeyusky.github.io/post-images/qcom1.png" alt="" />	
<p style="text-indent:2em;">HTML中的代码：</p>
<img src="https://yeyusky.github.io/post-images/qcom2.png" alt="" />	
<p style="text-indent:2em;">最后页面中的显示：</p>
<img src="https://yeyusky.github.io/post-images/qcom3.png" alt="" />	
<h1>vue之局部组件</h1>
<p style="text-indent:2em;">局部组件注册第一种方式：</p>
<img src="https://yeyusky.github.io/post-images/jbvue1.png" alt="" />
<p style="text-indent:2em;">局部组件注册第二种方式：</p>
<img src="https://yeyusky.github.io/post-images/jbvue2.png" alt="" />	
<img src="https://yeyusky.github.io/post-images/jbvue3.png" alt="" />
<p style="text-indent:2em;">HTML中的代码：</p>
<img src="https://yeyusky.github.io/post-images/jbvue4.png" alt="" />	
<p style="text-indent:2em;">最后页面中的显示：</p>
<img src="https://yeyusky.github.io/post-images/jbvue5.png" alt="" />	
<p style="text-indent:2em;font-size:18px;color:red; ">****前端小白初次写作，如有不足，还望指正</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[前端必走之路----CSS]]></title>
        <id>https://yeyusky.github.io/post/css-por</id>
        <link href="https://yeyusky.github.io/post/css-por">
        </link>
        <updated>2019-07-01T03:49:27.000Z</updated>
        <content type="html"><![CDATA[<p style="text-indent:2em;">前端的领域里，任何东西都离不开HTML 与 CSS。HTML与CSS基本上控制了你看到的所有东西，HTML用来定义内容而CSS负责样式与布局。</p>
<p style="text-indent:2em;">闲话少说，让我们再来熟悉一下CSS中的各个属性</p>
        <img src="https://yeyusky.github.io/post-images/totalcss.jpg" alt="" />]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://yeyusky.github.io/post/hello-gridea</id>
        <link href="https://yeyusky.github.io/post/hello-gridea">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="http://hvenotes.fehey.com/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>𝖶𝗂𝗇𝖽𝗈𝗐𝗌</strong> 或 <strong>𝖬𝖺𝖼𝖮𝖲</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>